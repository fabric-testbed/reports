# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from analytics_api.swagger_server.models.base_model_ import Model
from analytics_api.swagger_server import util


class Interface(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, interface_id: str=None, port: str=None, interface: str=None, facility: str=None, vlan: str=None, bdf: str=None):  # noqa: E501
        """Interface - a model defined in Swagger

        :param interface_id: The interface_id of this Interface.  # noqa: E501
        :type interface_id: str
        :param port: The port of this Interface.  # noqa: E501
        :type port: str
        :param interface: The interface of this Interface.  # noqa: E501
        :type interface: str
        :param facility: The facility of this Interface.  # noqa: E501
        :type facility: str
        :param vlan: The vlan of this Interface.  # noqa: E501
        :type vlan: str
        :param bdf: The bdf of this Interface.  # noqa: E501
        :type bdf: str
        """
        self.swagger_types = {
            'interface_id': str,
            'port': str,
            'interface': str,
            'facility': str,
            'vlan': str,
            'bdf': str
        }

        self.attribute_map = {
            'interface_id': 'interface_id',
            'port': 'port',
            'interface': 'interface',
            'facility': 'facility',
            'vlan': 'vlan',
            'bdf': 'bdf'
        }
        self._interface_id = interface_id
        self._port = port
        self._interface = interface
        self._facility = facility
        self._vlan = vlan
        self._bdf = bdf

    @classmethod
    def from_dict(cls, dikt) -> 'Interface':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The interface of this Interface.  # noqa: E501
        :rtype: Interface
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interface_id(self) -> str:
        """Gets the interface_id of this Interface.


        :return: The interface_id of this Interface.
        :rtype: str
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id: str):
        """Sets the interface_id of this Interface.


        :param interface_id: The interface_id of this Interface.
        :type interface_id: str
        """

        self._interface_id = interface_id

    @property
    def port(self) -> str:
        """Gets the port of this Interface.


        :return: The port of this Interface.
        :rtype: str
        """
        return self._port

    @port.setter
    def port(self, port: str):
        """Sets the port of this Interface.


        :param port: The port of this Interface.
        :type port: str
        """

        self._port = port

    @property
    def interface(self) -> str:
        """Gets the interface of this Interface.


        :return: The interface of this Interface.
        :rtype: str
        """
        return self._interface

    @interface.setter
    def interface(self, interface: str):
        """Sets the interface of this Interface.


        :param interface: The interface of this Interface.
        :type interface: str
        """

        self._interface = interface

    @property
    def facility(self) -> str:
        """Gets the facility of this Interface.


        :return: The facility of this Interface.
        :rtype: str
        """
        return self._facility

    @facility.setter
    def facility(self, facility: str):
        """Sets the facility of this Interface.


        :param facility: The facility of this Interface.
        :type facility: str
        """

        self._facility = facility

    @property
    def vlan(self) -> str:
        """Gets the vlan of this Interface.


        :return: The vlan of this Interface.
        :rtype: str
        """
        return self._vlan

    @vlan.setter
    def vlan(self, vlan: str):
        """Sets the vlan of this Interface.


        :param vlan: The vlan of this Interface.
        :type vlan: str
        """

        self._vlan = vlan

    @property
    def bdf(self) -> str:
        """Gets the bdf of this Interface.


        :return: The bdf of this Interface.
        :rtype: str
        """
        return self._bdf

    @bdf.setter
    def bdf(self, bdf: str):
        """Sets the bdf of this Interface.


        :param bdf: The bdf of this Interface.
        :type bdf: str
        """

        self._bdf = bdf
