# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reports_api.swagger_server.models.base_model_ import Model
from reports_api.swagger_server import util


class UserMembershipProjects(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, project_uuid: str=None, project_name: str=None, project_type: str=None, project_active: bool=None, expires_on: datetime=None, retired_date: datetime=None, membership_type: str=None, start_time: datetime=None, end_time: datetime=None, active: bool=None):  # noqa: E501
        """UserMembershipProjects - a model defined in Swagger

        :param project_uuid: The project_uuid of this UserMembershipProjects.  # noqa: E501
        :type project_uuid: str
        :param project_name: The project_name of this UserMembershipProjects.  # noqa: E501
        :type project_name: str
        :param project_type: The project_type of this UserMembershipProjects.  # noqa: E501
        :type project_type: str
        :param project_active: The project_active of this UserMembershipProjects.  # noqa: E501
        :type project_active: bool
        :param expires_on: The expires_on of this UserMembershipProjects.  # noqa: E501
        :type expires_on: datetime
        :param retired_date: The retired_date of this UserMembershipProjects.  # noqa: E501
        :type retired_date: datetime
        :param membership_type: The membership_type of this UserMembershipProjects.  # noqa: E501
        :type membership_type: str
        :param start_time: The start_time of this UserMembershipProjects.  # noqa: E501
        :type start_time: datetime
        :param end_time: The end_time of this UserMembershipProjects.  # noqa: E501
        :type end_time: datetime
        :param active: The active of this UserMembershipProjects.  # noqa: E501
        :type active: bool
        """
        self.swagger_types = {
            'project_uuid': str,
            'project_name': str,
            'project_type': str,
            'project_active': bool,
            'expires_on': datetime,
            'retired_date': datetime,
            'membership_type': str,
            'start_time': datetime,
            'end_time': datetime,
            'active': bool
        }

        self.attribute_map = {
            'project_uuid': 'project_uuid',
            'project_name': 'project_name',
            'project_type': 'project_type',
            'project_active': 'project_active',
            'expires_on': 'expires_on',
            'retired_date': 'retired_date',
            'membership_type': 'membership_type',
            'start_time': 'start_time',
            'end_time': 'end_time',
            'active': 'active'
        }
        self._project_uuid = project_uuid
        self._project_name = project_name
        self._project_type = project_type
        self._project_active = project_active
        self._expires_on = expires_on
        self._retired_date = retired_date
        self._membership_type = membership_type
        self._start_time = start_time
        self._end_time = end_time
        self._active = active

    @classmethod
    def from_dict(cls, dikt) -> 'UserMembershipProjects':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The userMembership_projects of this UserMembershipProjects.  # noqa: E501
        :rtype: UserMembershipProjects
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_uuid(self) -> str:
        """Gets the project_uuid of this UserMembershipProjects.

        UUID of the project  # noqa: E501

        :return: The project_uuid of this UserMembershipProjects.
        :rtype: str
        """
        return self._project_uuid

    @project_uuid.setter
    def project_uuid(self, project_uuid: str):
        """Sets the project_uuid of this UserMembershipProjects.

        UUID of the project  # noqa: E501

        :param project_uuid: The project_uuid of this UserMembershipProjects.
        :type project_uuid: str
        """

        self._project_uuid = project_uuid

    @property
    def project_name(self) -> str:
        """Gets the project_name of this UserMembershipProjects.

        Name of the project  # noqa: E501

        :return: The project_name of this UserMembershipProjects.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: str):
        """Sets the project_name of this UserMembershipProjects.

        Name of the project  # noqa: E501

        :param project_name: The project_name of this UserMembershipProjects.
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def project_type(self) -> str:
        """Gets the project_type of this UserMembershipProjects.

        Type of the project  # noqa: E501

        :return: The project_type of this UserMembershipProjects.
        :rtype: str
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type: str):
        """Sets the project_type of this UserMembershipProjects.

        Type of the project  # noqa: E501

        :param project_type: The project_type of this UserMembershipProjects.
        :type project_type: str
        """

        self._project_type = project_type

    @property
    def project_active(self) -> bool:
        """Gets the project_active of this UserMembershipProjects.

        Whether the project is active  # noqa: E501

        :return: The project_active of this UserMembershipProjects.
        :rtype: bool
        """
        return self._project_active

    @project_active.setter
    def project_active(self, project_active: bool):
        """Sets the project_active of this UserMembershipProjects.

        Whether the project is active  # noqa: E501

        :param project_active: The project_active of this UserMembershipProjects.
        :type project_active: bool
        """

        self._project_active = project_active

    @property
    def expires_on(self) -> datetime:
        """Gets the expires_on of this UserMembershipProjects.

        Expiration date of the project, if any  # noqa: E501

        :return: The expires_on of this UserMembershipProjects.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on: datetime):
        """Sets the expires_on of this UserMembershipProjects.

        Expiration date of the project, if any  # noqa: E501

        :param expires_on: The expires_on of this UserMembershipProjects.
        :type expires_on: datetime
        """

        self._expires_on = expires_on

    @property
    def retired_date(self) -> datetime:
        """Gets the retired_date of this UserMembershipProjects.

        Date when the project was retired, if applicable  # noqa: E501

        :return: The retired_date of this UserMembershipProjects.
        :rtype: datetime
        """
        return self._retired_date

    @retired_date.setter
    def retired_date(self, retired_date: datetime):
        """Sets the retired_date of this UserMembershipProjects.

        Date when the project was retired, if applicable  # noqa: E501

        :param retired_date: The retired_date of this UserMembershipProjects.
        :type retired_date: datetime
        """

        self._retired_date = retired_date

    @property
    def membership_type(self) -> str:
        """Gets the membership_type of this UserMembershipProjects.

        Role of the user in the project (e.g., owner, member)  # noqa: E501

        :return: The membership_type of this UserMembershipProjects.
        :rtype: str
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type: str):
        """Sets the membership_type of this UserMembershipProjects.

        Role of the user in the project (e.g., owner, member)  # noqa: E501

        :param membership_type: The membership_type of this UserMembershipProjects.
        :type membership_type: str
        """

        self._membership_type = membership_type

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this UserMembershipProjects.

        Start time of the membership  # noqa: E501

        :return: The start_time of this UserMembershipProjects.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this UserMembershipProjects.

        Start time of the membership  # noqa: E501

        :param start_time: The start_time of this UserMembershipProjects.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self) -> datetime:
        """Gets the end_time of this UserMembershipProjects.

        End time of the membership  # noqa: E501

        :return: The end_time of this UserMembershipProjects.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: datetime):
        """Sets the end_time of this UserMembershipProjects.

        End time of the membership  # noqa: E501

        :param end_time: The end_time of this UserMembershipProjects.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def active(self) -> bool:
        """Gets the active of this UserMembershipProjects.

        Whether the membership is currently active  # noqa: E501

        :return: The active of this UserMembershipProjects.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this UserMembershipProjects.

        Whether the membership is currently active  # noqa: E501

        :param active: The active of this UserMembershipProjects.
        :type active: bool
        """

        self._active = active
