# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reports_api.swagger_server.models.base_model_ import Model
from reports_api.swagger_server.models.user_membership_projects import UserMembershipProjects  # noqa: F401,E501
from reports_api.swagger_server import util


class UserMembership(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, user_email: str=None, active: bool=None, user_name: str=None, affiliation: str=None, registered_on: datetime=None, last_updated: datetime=None, google_scholar: str=None, scopus: str=None, projects: List[UserMembershipProjects]=None):  # noqa: E501
        """UserMembership - a model defined in Swagger

        :param user_id: The user_id of this UserMembership.  # noqa: E501
        :type user_id: str
        :param user_email: The user_email of this UserMembership.  # noqa: E501
        :type user_email: str
        :param active: The active of this UserMembership.  # noqa: E501
        :type active: bool
        :param user_name: The user_name of this UserMembership.  # noqa: E501
        :type user_name: str
        :param affiliation: The affiliation of this UserMembership.  # noqa: E501
        :type affiliation: str
        :param registered_on: The registered_on of this UserMembership.  # noqa: E501
        :type registered_on: datetime
        :param last_updated: The last_updated of this UserMembership.  # noqa: E501
        :type last_updated: datetime
        :param google_scholar: The google_scholar of this UserMembership.  # noqa: E501
        :type google_scholar: str
        :param scopus: The scopus of this UserMembership.  # noqa: E501
        :type scopus: str
        :param projects: The projects of this UserMembership.  # noqa: E501
        :type projects: List[UserMembershipProjects]
        """
        self.swagger_types = {
            'user_id': str,
            'user_email': str,
            'active': bool,
            'user_name': str,
            'affiliation': str,
            'registered_on': datetime,
            'last_updated': datetime,
            'google_scholar': str,
            'scopus': str,
            'projects': List[UserMembershipProjects]
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'user_email': 'user_email',
            'active': 'active',
            'user_name': 'user_name',
            'affiliation': 'affiliation',
            'registered_on': 'registered_on',
            'last_updated': 'last_updated',
            'google_scholar': 'google_scholar',
            'scopus': 'scopus',
            'projects': 'projects'
        }
        self._user_id = user_id
        self._user_email = user_email
        self._active = active
        self._user_name = user_name
        self._affiliation = affiliation
        self._registered_on = registered_on
        self._last_updated = last_updated
        self._google_scholar = google_scholar
        self._scopus = scopus
        self._projects = projects

    @classmethod
    def from_dict(cls, dikt) -> 'UserMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The userMembership of this UserMembership.  # noqa: E501
        :rtype: UserMembership
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this UserMembership.


        :return: The user_id of this UserMembership.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this UserMembership.


        :param user_id: The user_id of this UserMembership.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_email(self) -> str:
        """Gets the user_email of this UserMembership.


        :return: The user_email of this UserMembership.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email: str):
        """Sets the user_email of this UserMembership.


        :param user_email: The user_email of this UserMembership.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def active(self) -> bool:
        """Gets the active of this UserMembership.

        Indicates if the user is currently active  # noqa: E501

        :return: The active of this UserMembership.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this UserMembership.

        Indicates if the user is currently active  # noqa: E501

        :param active: The active of this UserMembership.
        :type active: bool
        """

        self._active = active

    @property
    def user_name(self) -> str:
        """Gets the user_name of this UserMembership.

        Full name of the user  # noqa: E501

        :return: The user_name of this UserMembership.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this UserMembership.

        Full name of the user  # noqa: E501

        :param user_name: The user_name of this UserMembership.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def affiliation(self) -> str:
        """Gets the affiliation of this UserMembership.

        Institutional or organizational affiliation  # noqa: E501

        :return: The affiliation of this UserMembership.
        :rtype: str
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation: str):
        """Sets the affiliation of this UserMembership.

        Institutional or organizational affiliation  # noqa: E501

        :param affiliation: The affiliation of this UserMembership.
        :type affiliation: str
        """

        self._affiliation = affiliation

    @property
    def registered_on(self) -> datetime:
        """Gets the registered_on of this UserMembership.

        Timestamp when the user registered  # noqa: E501

        :return: The registered_on of this UserMembership.
        :rtype: datetime
        """
        return self._registered_on

    @registered_on.setter
    def registered_on(self, registered_on: datetime):
        """Sets the registered_on of this UserMembership.

        Timestamp when the user registered  # noqa: E501

        :param registered_on: The registered_on of this UserMembership.
        :type registered_on: datetime
        """

        self._registered_on = registered_on

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this UserMembership.

        Timestamp of the last update to the user record  # noqa: E501

        :return: The last_updated of this UserMembership.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this UserMembership.

        Timestamp of the last update to the user record  # noqa: E501

        :param last_updated: The last_updated of this UserMembership.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def google_scholar(self) -> str:
        """Gets the google_scholar of this UserMembership.

        URL to the user's Google Scholar profile  # noqa: E501

        :return: The google_scholar of this UserMembership.
        :rtype: str
        """
        return self._google_scholar

    @google_scholar.setter
    def google_scholar(self, google_scholar: str):
        """Sets the google_scholar of this UserMembership.

        URL to the user's Google Scholar profile  # noqa: E501

        :param google_scholar: The google_scholar of this UserMembership.
        :type google_scholar: str
        """

        self._google_scholar = google_scholar

    @property
    def scopus(self) -> str:
        """Gets the scopus of this UserMembership.

        URL to the user's Scopus profile  # noqa: E501

        :return: The scopus of this UserMembership.
        :rtype: str
        """
        return self._scopus

    @scopus.setter
    def scopus(self, scopus: str):
        """Sets the scopus of this UserMembership.

        URL to the user's Scopus profile  # noqa: E501

        :param scopus: The scopus of this UserMembership.
        :type scopus: str
        """

        self._scopus = scopus

    @property
    def projects(self) -> List[UserMembershipProjects]:
        """Gets the projects of this UserMembership.

        List of project memberships for the user  # noqa: E501

        :return: The projects of this UserMembership.
        :rtype: List[UserMembershipProjects]
        """
        return self._projects

    @projects.setter
    def projects(self, projects: List[UserMembershipProjects]):
        """Sets the projects of this UserMembership.

        List of project memberships for the user  # noqa: E501

        :param projects: The projects of this UserMembership.
        :type projects: List[UserMembershipProjects]
        """

        self._projects = projects
