# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reports_api.swagger_server.models.base_model_ import Model
from reports_api.swagger_server import util


class ProjectMember(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_id: str=None, user_name: str=None, user_email: str=None, affiliation: str=None, membership_type: str=None):  # noqa: E501
        """ProjectMember - a model defined in Swagger

        :param user_id: The user_id of this ProjectMember.  # noqa: E501
        :type user_id: str
        :param user_name: The user_name of this ProjectMember.  # noqa: E501
        :type user_name: str
        :param user_email: The user_email of this ProjectMember.  # noqa: E501
        :type user_email: str
        :param affiliation: The affiliation of this ProjectMember.  # noqa: E501
        :type affiliation: str
        :param membership_type: The membership_type of this ProjectMember.  # noqa: E501
        :type membership_type: str
        """
        self.swagger_types = {
            'user_id': str,
            'user_name': str,
            'user_email': str,
            'affiliation': str,
            'membership_type': str
        }

        self.attribute_map = {
            'user_id': 'user_id',
            'user_name': 'user_name',
            'user_email': 'user_email',
            'affiliation': 'affiliation',
            'membership_type': 'membership_type'
        }
        self._user_id = user_id
        self._user_name = user_name
        self._user_email = user_email
        self._affiliation = affiliation
        self._membership_type = membership_type

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The projectMember of this ProjectMember.  # noqa: E501
        :rtype: ProjectMember
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this ProjectMember.


        :return: The user_id of this ProjectMember.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this ProjectMember.


        :param user_id: The user_id of this ProjectMember.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_name(self) -> str:
        """Gets the user_name of this ProjectMember.


        :return: The user_name of this ProjectMember.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this ProjectMember.


        :param user_name: The user_name of this ProjectMember.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def user_email(self) -> str:
        """Gets the user_email of this ProjectMember.


        :return: The user_email of this ProjectMember.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email: str):
        """Sets the user_email of this ProjectMember.


        :param user_email: The user_email of this ProjectMember.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def affiliation(self) -> str:
        """Gets the affiliation of this ProjectMember.


        :return: The affiliation of this ProjectMember.
        :rtype: str
        """
        return self._affiliation

    @affiliation.setter
    def affiliation(self, affiliation: str):
        """Sets the affiliation of this ProjectMember.


        :param affiliation: The affiliation of this ProjectMember.
        :type affiliation: str
        """

        self._affiliation = affiliation

    @property
    def membership_type(self) -> str:
        """Gets the membership_type of this ProjectMember.


        :return: The membership_type of this ProjectMember.
        :rtype: str
        """
        return self._membership_type

    @membership_type.setter
    def membership_type(self, membership_type: str):
        """Sets the membership_type of this ProjectMember.


        :param membership_type: The membership_type of this ProjectMember.
        :type membership_type: str
        """

        self._membership_type = membership_type
