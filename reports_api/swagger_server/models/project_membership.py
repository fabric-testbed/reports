# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reports_api.swagger_server.models.base_model_ import Model
from reports_api.swagger_server.models.project_member import ProjectMember  # noqa: F401,E501
from reports_api.swagger_server import util


class ProjectMembership(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, project_id: str=None, project_name: str=None, project_type: str=None, active: bool=None, created_date: datetime=None, expires_on: datetime=None, retired_date: datetime=None, last_updated: datetime=None, members: List[ProjectMember]=None):  # noqa: E501
        """ProjectMembership - a model defined in Swagger

        :param project_id: The project_id of this ProjectMembership.  # noqa: E501
        :type project_id: str
        :param project_name: The project_name of this ProjectMembership.  # noqa: E501
        :type project_name: str
        :param project_type: The project_type of this ProjectMembership.  # noqa: E501
        :type project_type: str
        :param active: The active of this ProjectMembership.  # noqa: E501
        :type active: bool
        :param created_date: The created_date of this ProjectMembership.  # noqa: E501
        :type created_date: datetime
        :param expires_on: The expires_on of this ProjectMembership.  # noqa: E501
        :type expires_on: datetime
        :param retired_date: The retired_date of this ProjectMembership.  # noqa: E501
        :type retired_date: datetime
        :param last_updated: The last_updated of this ProjectMembership.  # noqa: E501
        :type last_updated: datetime
        :param members: The members of this ProjectMembership.  # noqa: E501
        :type members: List[ProjectMember]
        """
        self.swagger_types = {
            'project_id': str,
            'project_name': str,
            'project_type': str,
            'active': bool,
            'created_date': datetime,
            'expires_on': datetime,
            'retired_date': datetime,
            'last_updated': datetime,
            'members': List[ProjectMember]
        }

        self.attribute_map = {
            'project_id': 'project_id',
            'project_name': 'project_name',
            'project_type': 'project_type',
            'active': 'active',
            'created_date': 'created_date',
            'expires_on': 'expires_on',
            'retired_date': 'retired_date',
            'last_updated': 'last_updated',
            'members': 'members'
        }
        self._project_id = project_id
        self._project_name = project_name
        self._project_type = project_type
        self._active = active
        self._created_date = created_date
        self._expires_on = expires_on
        self._retired_date = retired_date
        self._last_updated = last_updated
        self._members = members

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectMembership':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The projectMembership of this ProjectMembership.  # noqa: E501
        :rtype: ProjectMembership
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self) -> str:
        """Gets the project_id of this ProjectMembership.


        :return: The project_id of this ProjectMembership.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: str):
        """Sets the project_id of this ProjectMembership.


        :param project_id: The project_id of this ProjectMembership.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def project_name(self) -> str:
        """Gets the project_name of this ProjectMembership.


        :return: The project_name of this ProjectMembership.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: str):
        """Sets the project_name of this ProjectMembership.


        :param project_name: The project_name of this ProjectMembership.
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def project_type(self) -> str:
        """Gets the project_type of this ProjectMembership.


        :return: The project_type of this ProjectMembership.
        :rtype: str
        """
        return self._project_type

    @project_type.setter
    def project_type(self, project_type: str):
        """Sets the project_type of this ProjectMembership.


        :param project_type: The project_type of this ProjectMembership.
        :type project_type: str
        """

        self._project_type = project_type

    @property
    def active(self) -> bool:
        """Gets the active of this ProjectMembership.


        :return: The active of this ProjectMembership.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this ProjectMembership.


        :param active: The active of this ProjectMembership.
        :type active: bool
        """

        self._active = active

    @property
    def created_date(self) -> datetime:
        """Gets the created_date of this ProjectMembership.


        :return: The created_date of this ProjectMembership.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date: datetime):
        """Sets the created_date of this ProjectMembership.


        :param created_date: The created_date of this ProjectMembership.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def expires_on(self) -> datetime:
        """Gets the expires_on of this ProjectMembership.


        :return: The expires_on of this ProjectMembership.
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on: datetime):
        """Sets the expires_on of this ProjectMembership.


        :param expires_on: The expires_on of this ProjectMembership.
        :type expires_on: datetime
        """

        self._expires_on = expires_on

    @property
    def retired_date(self) -> datetime:
        """Gets the retired_date of this ProjectMembership.


        :return: The retired_date of this ProjectMembership.
        :rtype: datetime
        """
        return self._retired_date

    @retired_date.setter
    def retired_date(self, retired_date: datetime):
        """Sets the retired_date of this ProjectMembership.


        :param retired_date: The retired_date of this ProjectMembership.
        :type retired_date: datetime
        """

        self._retired_date = retired_date

    @property
    def last_updated(self) -> datetime:
        """Gets the last_updated of this ProjectMembership.


        :return: The last_updated of this ProjectMembership.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated: datetime):
        """Sets the last_updated of this ProjectMembership.


        :param last_updated: The last_updated of this ProjectMembership.
        :type last_updated: datetime
        """

        self._last_updated = last_updated

    @property
    def members(self) -> List[ProjectMember]:
        """Gets the members of this ProjectMembership.


        :return: The members of this ProjectMembership.
        :rtype: List[ProjectMember]
        """
        return self._members

    @members.setter
    def members(self, members: List[ProjectMember]):
        """Sets the members of this ProjectMembership.


        :param members: The members of this ProjectMembership.
        :type members: List[ProjectMember]
        """

        self._members = members
