# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from reports_api.swagger_server.models.base_model_ import Model
from reports_api.swagger_server.models.sliver_components import SliverComponents  # noqa: F401,E501
from reports_api.swagger_server.models.sliver_interfaces import SliverInterfaces  # noqa: F401,E501
from reports_api.swagger_server import util


class Sliver(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, project_id: str=None, project_name: str=None, slice_id: str=None, slice_name: str=None, user_id: str=None, user_email: str=None, host: str=None, site: str=None, sliver_id: str=None, node_id: str=None, state: str=None, sliver_type: str=None, ip_subnet: str=None, image: str=None, core: int=None, ram: int=None, disk: int=None, bandwidth: int=None, lease_start: datetime=None, lease_end: datetime=None, components: SliverComponents=None, interfaces: SliverInterfaces=None):  # noqa: E501
        """Sliver - a model defined in Swagger

        :param project_id: The project_id of this Sliver.  # noqa: E501
        :type project_id: str
        :param project_name: The project_name of this Sliver.  # noqa: E501
        :type project_name: str
        :param slice_id: The slice_id of this Sliver.  # noqa: E501
        :type slice_id: str
        :param slice_name: The slice_name of this Sliver.  # noqa: E501
        :type slice_name: str
        :param user_id: The user_id of this Sliver.  # noqa: E501
        :type user_id: str
        :param user_email: The user_email of this Sliver.  # noqa: E501
        :type user_email: str
        :param host: The host of this Sliver.  # noqa: E501
        :type host: str
        :param site: The site of this Sliver.  # noqa: E501
        :type site: str
        :param sliver_id: The sliver_id of this Sliver.  # noqa: E501
        :type sliver_id: str
        :param node_id: The node_id of this Sliver.  # noqa: E501
        :type node_id: str
        :param state: The state of this Sliver.  # noqa: E501
        :type state: str
        :param sliver_type: The sliver_type of this Sliver.  # noqa: E501
        :type sliver_type: str
        :param ip_subnet: The ip_subnet of this Sliver.  # noqa: E501
        :type ip_subnet: str
        :param image: The image of this Sliver.  # noqa: E501
        :type image: str
        :param core: The core of this Sliver.  # noqa: E501
        :type core: int
        :param ram: The ram of this Sliver.  # noqa: E501
        :type ram: int
        :param disk: The disk of this Sliver.  # noqa: E501
        :type disk: int
        :param bandwidth: The bandwidth of this Sliver.  # noqa: E501
        :type bandwidth: int
        :param lease_start: The lease_start of this Sliver.  # noqa: E501
        :type lease_start: datetime
        :param lease_end: The lease_end of this Sliver.  # noqa: E501
        :type lease_end: datetime
        :param components: The components of this Sliver.  # noqa: E501
        :type components: SliverComponents
        :param interfaces: The interfaces of this Sliver.  # noqa: E501
        :type interfaces: SliverInterfaces
        """
        self.swagger_types = {
            'project_id': str,
            'project_name': str,
            'slice_id': str,
            'slice_name': str,
            'user_id': str,
            'user_email': str,
            'host': str,
            'site': str,
            'sliver_id': str,
            'node_id': str,
            'state': str,
            'sliver_type': str,
            'ip_subnet': str,
            'image': str,
            'core': int,
            'ram': int,
            'disk': int,
            'bandwidth': int,
            'lease_start': datetime,
            'lease_end': datetime,
            'components': SliverComponents,
            'interfaces': SliverInterfaces
        }

        self.attribute_map = {
            'project_id': 'project_id',
            'project_name': 'project_name',
            'slice_id': 'slice_id',
            'slice_name': 'slice_name',
            'user_id': 'user_id',
            'user_email': 'user_email',
            'host': 'host',
            'site': 'site',
            'sliver_id': 'sliver_id',
            'node_id': 'node_id',
            'state': 'state',
            'sliver_type': 'sliver_type',
            'ip_subnet': 'ip_subnet',
            'image': 'image',
            'core': 'core',
            'ram': 'ram',
            'disk': 'disk',
            'bandwidth': 'bandwidth',
            'lease_start': 'lease_start',
            'lease_end': 'lease_end',
            'components': 'components',
            'interfaces': 'interfaces'
        }
        self._project_id = project_id
        self._project_name = project_name
        self._slice_id = slice_id
        self._slice_name = slice_name
        self._user_id = user_id
        self._user_email = user_email
        self._host = host
        self._site = site
        self._sliver_id = sliver_id
        self._node_id = node_id
        self._state = state
        self._sliver_type = sliver_type
        self._ip_subnet = ip_subnet
        self._image = image
        self._core = core
        self._ram = ram
        self._disk = disk
        self._bandwidth = bandwidth
        self._lease_start = lease_start
        self._lease_end = lease_end
        self._components = components
        self._interfaces = interfaces

    @classmethod
    def from_dict(cls, dikt) -> 'Sliver':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The sliver of this Sliver.  # noqa: E501
        :rtype: Sliver
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self) -> str:
        """Gets the project_id of this Sliver.


        :return: The project_id of this Sliver.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: str):
        """Sets the project_id of this Sliver.


        :param project_id: The project_id of this Sliver.
        :type project_id: str
        """

        self._project_id = project_id

    @property
    def project_name(self) -> str:
        """Gets the project_name of this Sliver.


        :return: The project_name of this Sliver.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name: str):
        """Sets the project_name of this Sliver.


        :param project_name: The project_name of this Sliver.
        :type project_name: str
        """

        self._project_name = project_name

    @property
    def slice_id(self) -> str:
        """Gets the slice_id of this Sliver.


        :return: The slice_id of this Sliver.
        :rtype: str
        """
        return self._slice_id

    @slice_id.setter
    def slice_id(self, slice_id: str):
        """Sets the slice_id of this Sliver.


        :param slice_id: The slice_id of this Sliver.
        :type slice_id: str
        """

        self._slice_id = slice_id

    @property
    def slice_name(self) -> str:
        """Gets the slice_name of this Sliver.


        :return: The slice_name of this Sliver.
        :rtype: str
        """
        return self._slice_name

    @slice_name.setter
    def slice_name(self, slice_name: str):
        """Sets the slice_name of this Sliver.


        :param slice_name: The slice_name of this Sliver.
        :type slice_name: str
        """

        self._slice_name = slice_name

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Sliver.


        :return: The user_id of this Sliver.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Sliver.


        :param user_id: The user_id of this Sliver.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_email(self) -> str:
        """Gets the user_email of this Sliver.


        :return: The user_email of this Sliver.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email: str):
        """Sets the user_email of this Sliver.


        :param user_email: The user_email of this Sliver.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def host(self) -> str:
        """Gets the host of this Sliver.


        :return: The host of this Sliver.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this Sliver.


        :param host: The host of this Sliver.
        :type host: str
        """

        self._host = host

    @property
    def site(self) -> str:
        """Gets the site of this Sliver.


        :return: The site of this Sliver.
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site: str):
        """Sets the site of this Sliver.


        :param site: The site of this Sliver.
        :type site: str
        """

        self._site = site

    @property
    def sliver_id(self) -> str:
        """Gets the sliver_id of this Sliver.


        :return: The sliver_id of this Sliver.
        :rtype: str
        """
        return self._sliver_id

    @sliver_id.setter
    def sliver_id(self, sliver_id: str):
        """Sets the sliver_id of this Sliver.


        :param sliver_id: The sliver_id of this Sliver.
        :type sliver_id: str
        """

        self._sliver_id = sliver_id

    @property
    def node_id(self) -> str:
        """Gets the node_id of this Sliver.


        :return: The node_id of this Sliver.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: str):
        """Sets the node_id of this Sliver.


        :param node_id: The node_id of this Sliver.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def state(self) -> str:
        """Gets the state of this Sliver.


        :return: The state of this Sliver.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this Sliver.


        :param state: The state of this Sliver.
        :type state: str
        """

        self._state = state

    @property
    def sliver_type(self) -> str:
        """Gets the sliver_type of this Sliver.


        :return: The sliver_type of this Sliver.
        :rtype: str
        """
        return self._sliver_type

    @sliver_type.setter
    def sliver_type(self, sliver_type: str):
        """Sets the sliver_type of this Sliver.


        :param sliver_type: The sliver_type of this Sliver.
        :type sliver_type: str
        """

        self._sliver_type = sliver_type

    @property
    def ip_subnet(self) -> str:
        """Gets the ip_subnet of this Sliver.


        :return: The ip_subnet of this Sliver.
        :rtype: str
        """
        return self._ip_subnet

    @ip_subnet.setter
    def ip_subnet(self, ip_subnet: str):
        """Sets the ip_subnet of this Sliver.


        :param ip_subnet: The ip_subnet of this Sliver.
        :type ip_subnet: str
        """

        self._ip_subnet = ip_subnet

    @property
    def image(self) -> str:
        """Gets the image of this Sliver.


        :return: The image of this Sliver.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this Sliver.


        :param image: The image of this Sliver.
        :type image: str
        """

        self._image = image

    @property
    def core(self) -> int:
        """Gets the core of this Sliver.


        :return: The core of this Sliver.
        :rtype: int
        """
        return self._core

    @core.setter
    def core(self, core: int):
        """Sets the core of this Sliver.


        :param core: The core of this Sliver.
        :type core: int
        """

        self._core = core

    @property
    def ram(self) -> int:
        """Gets the ram of this Sliver.


        :return: The ram of this Sliver.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram: int):
        """Sets the ram of this Sliver.


        :param ram: The ram of this Sliver.
        :type ram: int
        """

        self._ram = ram

    @property
    def disk(self) -> int:
        """Gets the disk of this Sliver.


        :return: The disk of this Sliver.
        :rtype: int
        """
        return self._disk

    @disk.setter
    def disk(self, disk: int):
        """Sets the disk of this Sliver.


        :param disk: The disk of this Sliver.
        :type disk: int
        """

        self._disk = disk

    @property
    def bandwidth(self) -> int:
        """Gets the bandwidth of this Sliver.


        :return: The bandwidth of this Sliver.
        :rtype: int
        """
        return self._bandwidth

    @bandwidth.setter
    def bandwidth(self, bandwidth: int):
        """Sets the bandwidth of this Sliver.


        :param bandwidth: The bandwidth of this Sliver.
        :type bandwidth: int
        """

        self._bandwidth = bandwidth

    @property
    def lease_start(self) -> datetime:
        """Gets the lease_start of this Sliver.


        :return: The lease_start of this Sliver.
        :rtype: datetime
        """
        return self._lease_start

    @lease_start.setter
    def lease_start(self, lease_start: datetime):
        """Sets the lease_start of this Sliver.


        :param lease_start: The lease_start of this Sliver.
        :type lease_start: datetime
        """

        self._lease_start = lease_start

    @property
    def lease_end(self) -> datetime:
        """Gets the lease_end of this Sliver.


        :return: The lease_end of this Sliver.
        :rtype: datetime
        """
        return self._lease_end

    @lease_end.setter
    def lease_end(self, lease_end: datetime):
        """Sets the lease_end of this Sliver.


        :param lease_end: The lease_end of this Sliver.
        :type lease_end: datetime
        """

        self._lease_end = lease_end

    @property
    def components(self) -> SliverComponents:
        """Gets the components of this Sliver.


        :return: The components of this Sliver.
        :rtype: SliverComponents
        """
        return self._components

    @components.setter
    def components(self, components: SliverComponents):
        """Sets the components of this Sliver.


        :param components: The components of this Sliver.
        :type components: SliverComponents
        """

        self._components = components

    @property
    def interfaces(self) -> SliverInterfaces:
        """Gets the interfaces of this Sliver.


        :return: The interfaces of this Sliver.
        :rtype: SliverInterfaces
        """
        return self._interfaces

    @interfaces.setter
    def interfaces(self, interfaces: SliverInterfaces):
        """Sets the interfaces of this Sliver.


        :param interfaces: The interfaces of this Sliver.
        :type interfaces: SliverInterfaces
        """

        self._interfaces = interfaces
